package xoric.prism.creator.drawer;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import xoric.prism.data.types.IPackable;
import xoric.prism.data.types.Path;
import xoric.prism.data.types.Point;
import xoric.prism.data.types.Text;
import xoric.prism.data.types.TextPacker;

public class DrawerModel implements IPackable
{
	private Text name;
	private Point tileSize;
	private Path path;
	private boolean hasChanges;

	public DrawerModel()
	{
		name = new Text("NEW MODEL");
		tileSize = new Point(0, 0);
		path = new Path("");
	}

	public void setChanged()
	{
		hasChanges = true;
	}

	public Path getPath()
	{
		return path;
	}

	public boolean hasChanges()
	{
		return hasChanges;
	}

	public Text getName()
	{
		return name;
	}

	public Point getTileSize()
	{
		return tileSize;
	}

	public boolean load(Path path)
	{
		boolean isOK;
		this.path = path;

		try
		{
			File f = path.getFile("m.meta");
			isOK = f.exists();
			if (isOK)
			{
				isOK = true;
			}
		}
		catch (IOException e)
		{
			isOK = false;
		}
		return isOK;
	}

	public boolean initPath(Path path)
	{
		boolean isOK;
		this.path = path;

		try
		{
			save();
			isOK = true;
		}
		catch (IOException e)
		{
			isOK = false;
		}
		return isOK;
	}

	public void save() throws IOException
	{
		File file = path.getFile("m.meta");
		FileOutputStream out = new FileOutputStream(file);
		pack(out);
		out.close();
	}

	@Override
	public void pack(OutputStream stream) throws IOException
	{
		TextPacker.pack_s(stream, name);
		tileSize.pack(stream);
	}

	@Override
	public void unpack(InputStream stream) throws IOException
	{
		name = TextPacker.unpack_s(stream);
		tileSize.unpack(stream);
	}

	@Override
	public int getPackedSize()
	{
		int size = TextPacker.getPackedSize_s(name);
		size += tileSize.getPackedSize();
		return size;
	}

	//	public void createImage(int width, int height)
	//	{
	//		image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	//	}
}
