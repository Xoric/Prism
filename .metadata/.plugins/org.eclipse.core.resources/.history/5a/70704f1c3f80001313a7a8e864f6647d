package xoric.prism.develop.meta;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;

import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;

import xoric.prism.swing.PrismFrame;

public class MetaFileManager extends PrismFrame implements MouseListener
{
	private static final long serialVersionUID = 1L;

	private final JTree tree;
	private final DefaultMutableTreeNode root;

	public MetaFileManager()
	{
		super("MetaFile Manager", 640, 400, true);

		root = new DefaultMutableTreeNode("Resources");
		tree = new JTree(root);
		tree.addMouseListener(this);
		JScrollPane scroll = new JScrollPane(tree);
		this.setContentPane(scroll);
	}

	public void loadDir(boolean autoCreate) throws DevException, IOException, MetaLineException, MetaFileException,
			FileTableMissingException, MetaListException, MetaBlockException, HeapException
	{
		if (autoCreate)
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		treeTop.removeAllChildren();
		loadSubdirs(DevCommon.RES_PATH, treeTop, autoCreate);
		tree.updateUI();

		if (autoCreate)
			setCursor(Cursor.getDefaultCursor());
	}

	private void expandAll()
	{
		for (int i = 0; i < tree.getRowCount(); i++)
			tree.expandRow(i);
	}

	private void collapseAll()
	{
		for (int i = 1; i < tree.getRowCount(); i++)
			tree.collapseRow(i);
	}

	@Override
	public void mouseClicked(MouseEvent arg0)
	{
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent arg0)
	{
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent arg0)
	{
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent arg0)
	{
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent arg0)
	{
		// TODO Auto-generated method stub

	}

	public static void main(String[] args)
	{
		setLookAndFeel();

		MetaFileManager m = new MetaFileManager();
		m.setVisible(true);
	}

	public static void setLookAndFeel()
	{
		try
		{
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		}
		catch (Exception e)
		{
		}
	}
}
