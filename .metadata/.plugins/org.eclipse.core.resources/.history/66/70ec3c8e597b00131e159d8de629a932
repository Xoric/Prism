package xoric.prism.creator.drawer.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

import xoric.prism.creator.drawer.control.IDrawerControl;

public class MainMenuBar extends JMenuBar implements ActionListener
{
	private static final long serialVersionUID = 1L;

	private IDrawerControl control;

	private JMenu menuModel;
	private JMenuItem menuItemNewModel;
	private JMenuItem menuItemOpenModel;
	private JMenuItem menuItemCloseModel;

	private JMenu menuExportModel;
	private JMenuItem menuItemExit;

	private JMenu menuTools;
	private JMenuItem menuItemExternalEditor;

	public MainMenuBar()
	{
		// model menu
		menuModel = createMenu(this, "Model");
		// --
		menuItemNewModel = createMenuItem(menuModel, "New");
		menuModel.addSeparator(); // --
		menuItemOpenModel = createMenuItem(menuModel, "Open");
		menuItemCloseModel = createMenuItem(menuModel, "Close");
		menuModel.addSeparator(); // --
		menuExportModel = createMenu(menuModel, "Export");
		menuModel.addSeparator(); // --
		menuItemExit = createMenuItem(menuModel, "Exit");
		// --

		// tools menu
		menuTools = createMenu(this, "Tools");
		// --
		menuItemExternalEditor = createMenuItem(menuTools, "External image editor");
		// --
	}

	public void setControl(IDrawerControl control)
	{
		this.control = control;
	}

	private JMenuItem createMenuItem(JMenu parentMenu, String text)
	{
		JMenuItem m = new JMenuItem(text);
			parentMenu.add(m);

		m.addActionListener(this);

		return m;
	}

	private JMenu createMenu(JMenu parent, String text)
	{
		JMenu m = new JMenu(text);
		parent.add(m);

		return m;
	}

	@Override
	public void actionPerformed(ActionEvent e)
	{
		Object o = e.getSource();

		if (o == menuItemNewModel)
			control.requestNewModel();
		else if (o == menuItemOpenModel)
			control.requestOpenModel();
		else if (o == menuItemCloseModel)
			control.requestCloseModel();

		else if (o == menuItemExternalEditor)
			control.requestInputExternalImageEditor();
	}
}
