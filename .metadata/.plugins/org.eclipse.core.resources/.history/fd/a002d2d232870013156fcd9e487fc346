package xoric.prism.creator.custom.view;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import xoric.prism.creator.common.spritelist.control.SpriteNameGenerator;
import xoric.prism.creator.common.spritelist.view.ISpriteList;
import xoric.prism.creator.common.spritelist.view.SpriteList;
import xoric.prism.creator.common.view.PrismCreatorCommonView;
import xoric.prism.creator.custom.control.ISpriteCollectionControl;
import xoric.prism.creator.custom.model.ObjectModel;
import xoric.prism.creator.custom.model.SpriteCollectionModel;

public class SpriteCollectionView extends PrismCreatorCommonView implements ISpriteCollectionView, IObjectListListener
{
	private static final long serialVersionUID = 1L;

	private SpriteCollectionModel model;

	private final IObjectList objectList;
	private final ISpriteList spriteList;
	private final IRectView rectView;

	public SpriteCollectionView()
	{
		super("SpriteCollection");
		super.setLayout(new GridBagLayout());

		ObjectList o = new ObjectList(this);
		objectList = o;
		Insets insets = new Insets(30, 30, 30, 30);
		GridBagConstraints c = new GridBagConstraints(0, 0, 1, 1, 0.4, 1.0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, insets, 0,
				0);
		add(o, c);

		SpriteList s = new SpriteList();
		spriteList = s;
		insets = new Insets(30, 0, 30, 30);
		c = new GridBagConstraints(1, 0, 1, 1, 0.6, 0.4, GridBagConstraints.CENTER, GridBagConstraints.BOTH, insets, 0, 0);
		add(s, c);

		RectView r = new RectView();
		rectView = r;
		c = new GridBagConstraints(1, 0, 1, 1, 0.6, 0.6, GridBagConstraints.CENTER, GridBagConstraints.BOTH, insets, 0, 0);
		add(r, c);

		setModel(null);
	}

	public void start()
	{
		setVisible(true);
	}

	@Override
	public void setControl(ISpriteCollectionControl control)
	{
		super.setMainMenuListener(control);
		this.objectList.setControl(control);
	}

	@Override
	public void setModel(SpriteCollectionModel model)
	{
		this.model = model;
		this.objectList.setModel(model);

		boolean b = model != null;
		objectList.setEnabled(b);
		spriteList.setEnabled(b);
	}

	@Override
	public void displayAll()
	{
		displayObjects();
		displayObject();
	}

	@Override
	public void displayObjects()
	{
		objectList.displayObjects();
	}
	
	private void displaySprites()
	{
		ObjectModel m = model.getModel(index);
		SpriteNameGenerator spriteNameGenerator = new SpriteNameGenerator(model.getPath(), m.getName().toString().toLowerCase()
				+ ".var", ".png");
		spriteList.loadAndDisplaySprites(spriteNameGenerator);
		revalidate();
		repaint();
	}

	@Override
	public void displayObject()
	{
		int index = objectList.getSelectedIndex();

		if (index >= 0 && index < model.getCount())
		{
			ObjectModel m = model.getModel(index);
			SpriteNameGenerator spriteNameGenerator = new SpriteNameGenerator(model.getPath(), m.getName().toString().toLowerCase()
					+ ".var", ".png");
			spriteList.loadAndDisplaySprites(spriteNameGenerator);
			revalidate();
			repaint();
		}
		else
		{
			spriteList.clear();
		}
	}
}
