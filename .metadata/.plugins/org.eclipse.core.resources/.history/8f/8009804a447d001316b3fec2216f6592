package xoric.prism.creator.drawer.control;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;

import xoric.prism.creator.drawer.settings.TempFile;
import xoric.prism.data.exceptions.PrismException;
import xoric.prism.data.types.IntPacker;
import xoric.prism.swing.input.PrismFileDialog;

public class ExternalImageEditor extends TempFile
{
	private File programFile;

	public ExternalImageEditor()
	{
		super("md-etie3.tmp");
	}

	public void execute(File imageFile)
	{
		if (programFile == null)
			showInput();

		if (programFile != null)
		{
			try
			{
				String[] s = { programFile.toString(), imageFile.toString() };
				Runtime.getRuntime().exec(s);
			}
			catch (IOException e0)
			{
				PrismException e = new PrismException(e0);
				e.setText("An error occured while trying to open an image in an external editing program specified by the user.");
				e.addInfo("editing program", programFile.toString());
				e.addInfo("image file", imageFile.toString());
				e.code.print();
				e.user.showMessage();
			}
		}
	}

	public void showInput()
	{
		PrismFileDialog d = new PrismFileDialog("Select program", "Select an external image editing program in order to edit sprites.");
		d.setDefaultFile(programFile);
		boolean b = d.showOpenDialog();

		if (b)
			programFile = d.getResult();
	}

	@Override
	public void pack(OutputStream stream) throws IOException
	{
		int n = programFile == null ? 0 : programFile.toString().length();
		IntPacker.pack_s(stream, n);
		PrintWriter pw = new PrintWriter(stream);
		pw.write(programFile.toString());
	}

	@Override
	public void unpack(InputStream stream) throws IOException
	{
		int n = IntPacker.unpack_s(stream);
		
		InputStreamReader is = new InputStreamReader(stream);
		StringBuilder sb=new StringBuilder();
		BufferedReader br = new BufferedReader(is);
		String read = br.readLine();

		while(read != null) {
		    //System.out.println(read);
		    sb.append(read);
		    read =br.readLine();

		}

		return sb.toString();

	}

	@Override
	public int getPackedSize()
	{
		int n = programFile == null ? 0 : programFile.toString().length();
		int size = IntPacker.getPackedSize_s(n);

		return size;
	}
}
