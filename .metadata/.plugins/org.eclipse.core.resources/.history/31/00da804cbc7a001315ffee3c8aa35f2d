package xoric.prism.creator.drawer.image;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import xoric.prism.creator.drawer.model.AnimationModel;
import xoric.prism.data.types.IPath_r;
import xoric.prism.world.entities.ViewAngle;

public class SpritesList extends JPanel implements IFramesView, ActionListener
{
	private static final long serialVersionUID = 1L;

	private final JList<SpriteCell> list;

	private final JButton deleteButton;
	private final JButton copyButton;
	private final JButton pasteButton;

	public SpritesList()
	{
		super(new GridBagLayout());

		list = new JList<SpriteCell>();
		list.setLayoutOrientation(JList.HORIZONTAL_WRAP);
		list.setVisibleRowCount(1);
		list.setCellRenderer(new SpriteCellRenderer());

		JScrollPane scroll = new JScrollPane(list);
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
		scroll.getHorizontalScrollBar().setUnitIncrement(16);

		FlowLayout f = new FlowLayout();
		JPanel p = new JPanel(f);
		p.add(deleteButton = createButton("Delete", null, "Delete selected frame(s)"));
		p.add(copyButton = createButton("Copy", null, "Copy selected frame(s)"));
		p.add(pasteButton = createButton("Paste", null, "Insert selected frame(s)"));

		Insets insets = new Insets(0, 0, 0, 0);

		GridBagConstraints c = new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.VERTICAL, insets, 0, 0);
		add(scroll, c);

		c = new GridBagConstraints(0, 1, 1, 1, 1.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, insets, 0, 0);
		add(p, c);
	}

	private JButton createButton(String s, String icon, String tooltip)
	{
		JButton b = new JButton();
		b.addActionListener(this);
		boolean hasIcon = false;
		try
		{
			if (icon != null && icon.length() > 0)
			{
				Image img = ImageIO.read(ClassLoader.getSystemResource(icon));
				ImageIcon icn = new ImageIcon(img);
				b.setIcon(icn);
				Dimension d = new Dimension(icn.getIconWidth(), icn.getIconHeight());
				b.setPreferredSize(d);
				b.setMinimumSize(d);
				b.setMaximumSize(d);
				b.setToolTipText(tooltip);
				hasIcon = true;
			}
		}
		catch (Exception e)
		{
		}
		if (!hasIcon)
			b.setText(s);

		return b;
	}

	@Override
	public void loadFrames(AnimationModel m, ViewAngle v)
	{
		DefaultListModel<SpriteCell> model = new DefaultListModel<SpriteCell>();
		boolean resume = true;
		int i = 0;

		do
		{
			String filename = m.getFileName(v, i);
			IPath_r path = m.getPath();
			File f = path.getFile(filename);
			resume = f.exists();

			if (resume)
			{
				SpriteCell c = new SpriteCell(filename);
				c.loadIcon(path);
				model.addElement(c);
			}
			++i;
		}
		while (resume);

		list.setModel(model);
	}

	@Override
	public void actionPerformed(ActionEvent arg0)
	{
		// TODO Auto-generated method stub

	}
}
