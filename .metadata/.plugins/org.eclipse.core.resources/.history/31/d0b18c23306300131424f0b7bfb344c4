package xoric.prism.meta;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import xoric.prism.data.IPackable;
import xoric.prism.data.IntPacker;

public class MetaBlock implements IPackable
{
	private MetaBlockToken token;
	private final List<MetaLine> list;
	private final IntPacker intPacker;

	public MetaBlock(MetaBlockToken token)
	{
		this.token = token;
		this.list = new ArrayList<MetaLine>();
		this.intPacker = new IntPacker();
	}

	@Override
	public void pack(OutputStream stream) throws IOException
	{
		// write token
		stream.write(token.ordinal());

		// write number of lines

		i.setValue(list.size());
		i.pack(stream);

		// write lines
		for (MetaLine l : list)
			l.pack(stream);
	}

	@Override
	public void unpack(InputStream stream) throws IOException
	{
		int i = stream.read();
		token = MetaBlockToken.values()[i]; // TODO: unsafe
		for (MetaLine l : list)
			l.unpack(stream);
	}

	@Override
	public int getPackedSize()
	{
		int size = 1; // token
		for (MetaLine l : list)
			size += l.getPackedSize();

		return size;
	}
}
