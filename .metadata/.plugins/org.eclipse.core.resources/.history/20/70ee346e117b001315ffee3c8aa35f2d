package xoric.prism.creator.drawer.view;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

import xoric.prism.creator.drawer.model.AnimationModel;
import xoric.prism.world.entities.AnimationIndex;

public class AnimationLineWithControls extends AnimationLine implements ActionListener
{
	private static final long serialVersionUID = 1L;

	private final IAnimationEditor mainView;

	private final JButton addButton;
	private final JButton editButton;
	private final JButton deleteButton;

	public AnimationLineWithControls(IAnimationEditor e)
	{
		this.mainView = e;

		addButton = createButton("Add", "icons/add.png", "Click here to add this animation");
		editButton = createButton("Edit", "icons/edit.png", "Click here to edit this animation");
		deleteButton = createButton("Delete", "icons/del.png", "Click here to delete this animation");

		JPanel buttonPanel = new JPanel(new FlowLayout());
		buttonPanel.add(addButton);
		buttonPanel.add(editButton);
		buttonPanel.add(deleteButton);

		GridBagConstraints c = new GridBagConstraints(1, 0, 1, 2, 0.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(0,
				0, 0, 0), 0, 0);
		add(buttonPanel, c);

		setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
		showAddButton(true);
	}

	private JButton createButton(String s, String icon, String tooltip)
	{
		JButton b = new JButton();
		b.addActionListener(this);
		boolean hasIcon = false;
		try
		{
			if (icon != null && icon.length() > 0)
			{
				Image img = ImageIO.read(ClassLoader.getSystemResource(icon));
				ImageIcon icn = new ImageIcon(img);
				b.setIcon(icn);
				Dimension d = new Dimension(icn.getIconWidth(), icn.getIconHeight());
				b.setPreferredSize(d);
				b.setMinimumSize(d);
				b.setMaximumSize(d);
				b.setToolTipText(tooltip);
				hasIcon = true;
			}
		}
		catch (Exception e)
		{
		}
		if (!hasIcon)
			b.setText(s);

		return b;
	}

	@Override
	public void setEnabled(boolean enabled)
	{
		super.setEnabled(enabled);
		addButton.setEnabled(enabled);
		deleteButton.setEnabled(enabled);
	}

	private void showAddButton(boolean b)
	{
		addButton.setVisible(b);
		editButton.setVisible(!b);
		deleteButton.setVisible(!b);
	}

	@Override
	public void displayAnimation(AnimationModel m)
	{
		super.displayAnimation(m);

		// show/hide buttons
		showAddButton(!isUsed);

		// display other information
		// TODO
	}

	@Override
	public void actionPerformed(ActionEvent e)
	{
		Object o = e.getSource();

		if (o == addButton)
			control.requestAddAnimation(animation);
		else if (o == editButton)
			mainView.requestEditAnimation(animation);
		else if (o == deleteButton)
			control.requestDeleteAnimation(animation);
	}
}
