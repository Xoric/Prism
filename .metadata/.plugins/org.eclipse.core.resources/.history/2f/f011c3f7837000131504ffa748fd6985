package xoric.prism.world.map;

import java.util.List;

import xoric.prism.data.IPoint_r;
import xoric.prism.data.Point;
import xoric.prism.world.map.routing.Edge;
import xoric.prism.world.map.routing.INode;
import xoric.prism.world.movement.MoveCaps;

public class Tile implements INode
{
	public static final int WIDTH = 160;
	public static final int HEIGHT = 120;

	private Ground ground;
	protected List<Edge> edges; // may be null
	protected Point coords;

	@Override
	public List<Edge> getEdges(MoveCaps caps)
	{
		List<Edge> edges;

		if (this.edges != null)
		{
			edges = new ArrayList<Edge>();
			for (Edge e : this.edges)
				if (e.getMoveCaps().isAccessibleFor(caps))
					edges.add(e);
		}
		else
			edges = null;

		return edges;
	}

	@Override
	public float estimateCost(INode targetNode)
	{
		// TODO expensive - find simpler cost estimation?
		float cost = coords.calcDistance(targetNode.getCoords());
		return cost;
	}

	@Override
	public IntPoint getCoords()
	{
		return coords;
	}
}
