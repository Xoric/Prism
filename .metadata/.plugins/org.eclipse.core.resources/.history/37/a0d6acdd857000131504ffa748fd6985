package xoric.prism.world.map;

import java.util.ArrayList;
import java.util.List;

import xoric.prism.data.IPackable;
import xoric.prism.data.IPoint_r;
import xoric.prism.world.map.routing.Edge;
import xoric.prism.world.map.routing.INode;
import xoric.prism.world.movement.MoveCaps;

public class Tile implements INode, IPackable
{
	public static final int WIDTH = 160;
	public static final int HEIGHT = 120;

	private Ground ground;
	protected List<Edge> edges; // may be null
	protected IPoint_r coords;

	public Tile(IPoint_r coords, Ground ground)
	{
		this.coords = coords;
		this.ground = ground;
	}

	public Ground getGround()
	{
		return ground;
	}

	/**
	 * Checks the target-node of the given edge for accessibility and adds it if valid. Returns true if the edge was added.
	 * @param edge
	 * @return boolean
	 */
	public boolean addEdge(Edge edge)
	{
		boolean isValid = edge.getMoveCaps().anyIsTrue();
		if (isValid)
		{
			if (edges == null)
				edges = new ArrayList<Edge>();
			edges.add(edge);
		}
		return isValid;
	}

	/**
	 * Removes all edges.
	 */
	public void clearEdges()
	{
		edges = null;
	}

	@Override
	public List<Edge> getEdges(MoveCaps caps)
	{
		List<Edge> edges;

		if (this.edges != null)
		{
			edges = new ArrayList<Edge>();
			for (Edge e : this.edges)
				if (e.getMoveCaps().isAccessibleFor(caps))
					edges.add(e);
		}
		else
			edges = null;

		return edges;
	}

	@Override
	public float estimateCost(INode targetNode)
	{
		float cost = coords.calcDistance(targetNode.getCoords());
		return cost;
	}

	@Override
	public IPoint_r getCoords()
	{
		return coords;
	}
}
