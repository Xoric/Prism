package xoric.prism.creator.drawer.view;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import xoric.prism.creator.drawer.image.IconLoader;
import xoric.prism.swing.PrismPanel;

public class PortraitPanel extends PrismPanel implements ActionListener
{
	private static final long serialVersionUID = 1L;

	private final JLabel iconLabel;
	private final JButton newButton;
	private final JButton editButton;
	private final JButton importButton;

	public PortraitPanel()
	{
		super("Portrait");

		JPanel p = new JPanel(new GridBagLayout());
		setContent(p);

		JPanel buttonPanel = new JPanel(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0,
				0, 0, 0), 0, 0);
		buttonPanel.add(newButton = createButton("New", "icons/add.png", "Create a new portrait image."), c);
		c.gridx++;
		buttonPanel.add(editButton = createButton("Edit", "icons/edit.png", "Open the portrait image in an external editing program."), c);
		c.gridx++;
		buttonPanel.add(importButton = createButton("...", null, "Import an existing image as portrait."), c);

		c = new GridBagConstraints(0, 0, 1, 1, 0.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0);
		p.add(iconLabel = new JLabel(), c);

		c = new GridBagConstraints(1, 0, 1, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 30, 0, 0), 0, 0);
		p.add(buttonPanel, c);

		updatePortrait(null);
	}

	private void updatePortrait(File file)
	{
		try
		{
			ImageIcon icon = IconLoader.loadIconFromResource("icons/port.png");
			iconLabel.setIcon(icon);
		}
		catch (Exception e)
		{
			iconLabel.setText("N/A");
			iconLabel.setIcon(null);
		}
	}

	private JButton createButton(String text, String iconResource, String tooltip)
	{
		JButton b = new JButton();
		boolean hasIcon = false;
		try
		{
			if (iconResource != null)
			{
				ImageIcon icon = IconLoader.loadIconFromResource(iconResource);
				b.setIcon(icon);
				hasIcon = true;
			}
		}
		catch (Exception e)
		{
			hasIcon = false;
		}
		if (!hasIcon)
			b.setText(text);

		b.setToolTipText(tooltip);
		b.addActionListener(this);

		return b;
	}

	@Override
	public void actionPerformed(ActionEvent arg0)
	{
		// TODO Auto-generated method stub

	}

	// icon = IconLoader.loadIconFromFile(portraitFile, 100, 80);
}
