package xoric.prism.creator.drawer.control;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import xoric.prism.creator.drawer.model.DrawerModel;
import xoric.prism.creator.drawer.model.SpriteNames;
import xoric.prism.data.types.IPath_r;
import xoric.prism.data.types.IPoint_r;
import xoric.prism.world.entities.AnimationIndex;
import xoric.prism.world.entities.ViewAngle;

public class GridGenerator
{
	private final DrawerModel model;
	private List<BufferedImage> images;

	public GridGenerator(DrawerModel model)
	{
		this.model = model;
	}

	public void generateAll()
	{
		images = new ArrayList<BufferedImage>();

		for (AnimationIndex a : AnimationIndex.values())
			generateAnimation(a);

		// find maximum width and calculate height
		IPoint_r tileSize = model.getTileSize();
		int w = findMaxImageWidth();
		int h = tileSize.getY() * images.size();
	}

	private void generateAnimation(AnimationIndex a)
	{
		for (ViewAngle v : ViewAngle.values())
			generateAngle(a, v);
	}

	private void generateAngle(AnimationIndex a, ViewAngle v) throws IOException
	{
		IPath_r path = model.getPath();
		int n = findMaxIndex(a, v);

		if (n > 0)
		{
			IPoint_r tileSize = model.getTileSize();
			int w = tileSize.getX();
			int ws = w * n;
			int h = tileSize.getY();

			BufferedImage img = new BufferedImage(ws, h, BufferedImage.TYPE_INT_ARGB);
			Graphics g = img.getGraphics();

			for (int i = 0; i < n; ++i)
			{
				File file = path.getFile(SpriteNames.getFilename(a, v, n));
				BufferedImage b = ImageIO.read(file);
				g.drawImage(b, i * w, 0, w, h, null);
			}

			g.dispose();
			images.add(img);
		}
	}

	private int findMaxIndex(AnimationIndex a, ViewAngle v)
	{
		IPath_r path = model.getPath();
		int n = 0;
		boolean b;

		do
		{
			File file = path.getFile(SpriteNames.getFilename(a, v, n));
			b = file.exists();
			if (b)
				++n;
		}
		while (b);

		return n - 1;
	}

	private int findMaxImageWidth()
	{
		int w = 0;

		for (BufferedImage img : images)
		{
			int j = img.getWidth();
			if (j > w)
				w = j;
		}
		return w;
	}
}
