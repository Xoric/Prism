package xoric.prism.creator.drawer.settings;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import xoric.prism.data.types.IPath_r;
import xoric.prism.data.types.Path;

public class WorkingDirs extends TempFile
{
	private File externalEditor;
	private List<Path> workingDirs;

	public WorkingDirs()
	{
		super("md-create3.tmp");

		workingDirs = new ArrayList<Path>();
	}

	public void addWorkingDirectory(IPath_r path)
	{
		String s = path.toString();
		int i = findEntry(s);

		if (i >= 0)
		{
			if (i >= 1)
			{
				workingDirs.remove(i);
				workingDirs.add(0, new Path(s));
				save();
			}
		}
		else
		{
			workingDirs.add(0, new Path(s));
			save();
		}
	}

	private int findEntry(String s)
	{
		for (int i = 0; i < workingDirs.size(); ++i)
			if (workingDirs.get(i).toString().equals(s))
				return i;

		return -1;
	}

	@Override
	public void pack(OutputStream stream) throws IOException
	{
		int n = workingDirs.size();
		if (n > 5)
			n = 5;

		for (int i = 0; i < n; ++i)
		{
			String s = workingDirs.get(i).toString();
			stream.write(s.getBytes("UTF-8"));
		}
	}

	@Override
	public void unpack(InputStream stream) throws IOException
	{
		workingDirs.clear();

		BufferedReader in = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
		BufferedReader br = new BufferedReader(in);
		String line;

		while ((line = br.readLine()) != null)
		{
			Path p = new Path(line);
			workingDirs.add(p);
			line = br.readLine();
		}
	}

	@Override
	public int getPackedSize()
	{
		return 0;
	}
}
