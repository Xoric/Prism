package xoric.prism.creator.drawer;

import xoric.prism.scene.IRenderer;
import xoric.prism.scene.IScene;
import xoric.prism.scene.ISceneListener;
import xoric.prism.scene.SceneStage;

public class PaintThread implements Runnable, ISceneListener
{
	private final IScene scene;

	public PaintThread(IScene scene)
	{
		this.scene = scene;
	}

	@Override
	public void run()
	{
		scene.createWindow(640, 480, false);
		scene.startLoop(this);
		scene.setStage(SceneStage.INTERFACE);
	}

	@Override
	public boolean requestUpdateScene(int passedMs, IRenderer renderer)
	{
		scene.setStage(SceneStage.GROUND);

		float seconds = 0.001f * passedMs;
		movable.timeUpdate(passedMs, seconds);

		//		nz = -3.0f;
		renderer.setColor(0.8f, 0.2f, 0.2f);

		// walk
		walkingMan.x += walkingX;
		walkingMan.y += walkingY;

		if (walkingMan.x < 0.0f)
		{
			walkingX = (float) (1.0f + Math.random() * 4.0f);
		}
		else if (walkingMan.x > 800.0f - manSize.getX())
		{
			walkingX = -1.0f * (float) (1.0f + Math.random() * 4.0f);
		}

		if (walkingMan.y < 0.0f)
		{
			walkingY = (float) (1.0f + Math.random() * 4.0f);
		}
		else if (walkingMan.y > 480.0f)
		{
			walkingY = -1.0f * (float) (1.0f + Math.random() * 4.0f);
		}

		// draw planes
		cam.transformWithCameraBounds(testPlane.getTopLeft(), temp);
		cam.transformWithCameraBounds(testPlane.getSize(), temp2);
		renderer.drawPlane(temp, temp2);

		// draw edges
		renderer.setColor(0.3f, 0.5f, 0.2f);
		cam.transformWithCameraBounds(manSize, temp2);
		for (int i = 0; i < 4; ++i)
		{
			cam.transformWithCameraBounds(testMan[i], temp);
			renderer.drawObject(temp, temp2, 0.0f);
		}

		// draw walking man
		renderer.setColor(0.3f, 0.2f, 0.8f);
		cam.transformWithCameraBounds(walkingMan, temp);
		renderer.drawObject(temp, temp2, 0.0f);

		// draw movable
		renderer.setColor(0.3f, 0.2f, 0.5f);
		cam.transformWithCameraBounds(movable.getPosition(), temp);
		renderer.drawObject(temp, temp2, 0.0f);

		return true;
	}

	@Override
	public void onClosingScene()
	{
		System.out.println("closing scene");
	}
}
