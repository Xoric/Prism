package xoric.prism.creator.drawer.view;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.ScrollPaneConstants;

import xoric.prism.creator.drawer.control.IDrawerControl2;
import xoric.prism.swing.PrismPanel;
import xoric.prism.world.entities.AnimationIndex;

public class AnimationList extends PrismPanel implements ActionListener
{
	private static final long serialVersionUID = 1L;

	private List<AnimationLine> list;
	private final JPanel pane;

	private JButton but = new JButton("TEST");

	public AnimationList()
	{
		super("Animations");

		pane = new JPanel(new GridBagLayout());

		int y = 0;

		list = new ArrayList<AnimationLine>();
		AnimationIndex[] animations = AnimationIndex.values();

		// create a line for each animation
		for (int i = 0; i < animations.length; ++i)
		{
			//			if (i > 0)
			//			{
			//				JSeparator s = new JSeparator();
			//				GridBagConstraints c = createConstraints(y++);
			//				pane.add(s, c);
			//			}

			AnimationIndex a = animations[i];

			AnimationLine l = new AnimationLine(a);
			//			GridBagConstraints c = createConstraints(y++);
			//			pane.add(l, c);
			insertSorted(l);
			//			list.add(l);
		}

		but.addActionListener(this);

		JScrollPane scroll = new JScrollPane(pane, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
				ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		scroll.getVerticalScrollBar().setUnitIncrement(16);
		scroll.getHorizontalScrollBar().setUnitIncrement(16);

		setContent(scroll);
		sortList();
	}

	private void insertSorted(AnimationLine l)
	{
		for (int i = 0; i < list.size(); ++i)
		{
			String a = list.get(i).getAnimationName();
		}
	}

	public void sortList()
	{
		int y = 0;

		pane.removeAll();
		pane.add(but, createConstraints(y++));

		// add used animations
		for (int i = 0; i < list.size(); ++i)
		{
			AnimationLine l = list.get(i);
			if (l.isUsed())
			{
				if (y > 0)
					pane.add(new JSeparator(), createConstraints(y++));

				pane.add(l, createConstraints(y++));
			}
		}

		// add unused animations
		for (int i = 0; i < list.size(); ++i)
		{
			AnimationLine l = list.get(i);
			if (!l.isUsed())
			{
				if (y > 0)
					pane.add(new JSeparator(), createConstraints(y++));

				pane.add(l, createConstraints(y++));
			}
		}

		pane.revalidate();
		pane.repaint();
	}

	private static GridBagConstraints createConstraints(int line)
	{
		return new GridBagConstraints(0, line, 1, 1, 1.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0),
				0, 0);
	}

	public void setControl(IDrawerControl2 control)
	{
		for (AnimationLine l : list)
			l.setControl(control);
	}

	@Override
	public void setEnabled(boolean enabled)
	{
		super.setEnabled(enabled);

		for (AnimationLine l : list)
			l.setEnabled(enabled);
	}

	@Override
	public void actionPerformed(ActionEvent arg0)
	{
		sortList();
	}
}
