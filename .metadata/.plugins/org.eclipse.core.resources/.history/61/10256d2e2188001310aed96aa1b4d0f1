package xoric.prism.creator.custom.creators;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import xoric.prism.creator.common.spritelist.control.SpriteNameGenerator;
import xoric.prism.data.exceptions.PrismException;
import xoric.prism.data.types.Point;

class ObjectImages
{
	private final List<BufferedImage> images;

	public ObjectImages()
	{
		this.images = new ArrayList<BufferedImage>();
	}

	public void load(SpriteNameGenerator spriteNameGenerator) throws PrismException
	{
		int i = 0;
		boolean resume;

		images.clear();

		do
		{
			File f = spriteNameGenerator.getFile(i);
			resume = f.exists();

			if (resume)
			{
				try
				{
					BufferedImage bi = ImageIO.read(f);
					images.add(bi);
				}
				catch (Exception e0)
				{
					PrismException e = new PrismException(e0);
					e.setText("Image could not be loaded.");
					e.addInfo("image", f.toString());
					throw e;
				}
			}
		}
		while (resume);
	}

	public Point findHighestDimensions()
	{
		Point p = new Point();

		for (int i = 0; i < images.size(); ++i)
		{
			BufferedImage bi = images.get(i);

			if (i == 0 || bi.getWidth() > p.getX())
				p.x = bi.getWidth();
			if (i == 0 || bi.getHeight() > p.getY())
				p.y = bi.getHeight();
		}
		return p;
	}
}
