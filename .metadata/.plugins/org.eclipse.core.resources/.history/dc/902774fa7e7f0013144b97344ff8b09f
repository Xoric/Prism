package xoric.prism.data.meta;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

import xoric.prism.data.exceptions.IExceptionHost;
import xoric.prism.data.exceptions.PrismException;
import xoric.prism.data.exceptions.UserErrorText;
import xoric.prism.data.types.Heap;
import xoric.prism.data.types.HeapPacker_s;
import xoric.prism.data.types.IPackable;

public class MetaLine implements IPackable, IExceptionHost
{
	private final byte[] keyBuf;
	private final MetaKey key;
	private Heap heap;

	private IExceptionHost uplink;

	public MetaLine()
	{
		this.key = MetaKey.ITEM;
		this.keyBuf = new byte[1];
		this.keyBuf[0] = key.toByte();
		this.heap = new Heap();
	}

	public MetaLine(MetaKey key)
	{
		this.key = key;
		this.keyBuf = new byte[1];
		this.keyBuf[0] = key.toByte();
		this.heap = new Heap();
	}

	@SuppressWarnings("rawtypes")
	private void checkList(MetaKey key, String name, List list, int min) throws PrismException
	{
		if (list.size() < min)
		{
			PrismException e = new PrismException();
			// ----
			e.user.setText(UserErrorText.LOCAL_GAME_FILE_CAUSED_PROBLEM);
			// ----
			addExceptionInfoTo(e);
			e.code.setText("MetaLine " + key.toString() + " too few " + name, min, list.size());
			// ----
			// ----
			throw e;
		}
	}

	/**
	 * Ensures that there are a minimum number of ints, floats and Texts. Throws an exception if not.
	 * @param ni
	 *            number of ints
	 * @param nf
	 *            number of floats
	 * @param nt
	 *            number of Texts
	 * @throws PrismException
	 */
	public void ensureMinima(int ni, int nf, int nt) throws PrismException
	{
		checkList(key, "ints", heap.ints, ni);
		checkList(key, "floats", heap.floats, nf);
		checkList(key, "texts", heap.texts, nt);
	}

	@Override
	public String toString()
	{
		return key.toString() + " " + heap.toString();
	}

	public MetaKey getKey()
	{
		return key;
	}

	public Heap getHeap()
	{
		return heap;
	}

	@Override
	public void pack(OutputStream stream) throws IOException
	{
		stream.write(keyBuf);
		HeapPacker_s.pack_s(stream, heap, 2);
	}

	@Override
	public void unpack(InputStream stream) throws IOException
	{
		stream.read(keyBuf);
		heap = HeapPacker_s.unpack_s(stream, 2);
	}

	@Override
	public void setUplink(IExceptionHost uplink)
	{
		this.uplink = uplink;
	}

	@Override
	public void addExceptionInfoTo(PrismException e)
	{
		if (uplink != null)
			uplink.addExceptionInfoTo(e);

		e.code.addInfo("MetaLine", toString());
	}
}
