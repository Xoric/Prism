package xoric.prism.scene.lwjgl;

import java.nio.ByteBuffer;

import org.lwjgl.opengl.ARBFragmentShader;
import org.lwjgl.opengl.ARBShaderObjects;
import org.lwjgl.opengl.ARBVertexShader;
import org.lwjgl.opengl.GL11;

import xoric.prism.data.modules.ActorID;
import xoric.prism.data.modules.ErrorCode;
import xoric.prism.data.modules.ErrorID;
import xoric.prism.data.modules.IActor;
import xoric.prism.scene.IShader;
import xoric.prism.scene.exceptions.PrismShaderException;
import xoric.prism.scene.shader.ShaderType;

public class Shader implements IShader, IActor
{
	private int program;

	public Shader()
	{
		program = 0;
	}

	private static String getLogInfo(int obj)
	{
		return ARBShaderObjects.glGetInfoLogARB(obj, ARBShaderObjects.glGetObjectParameteriARB(obj,
				ARBShaderObjects.GL_OBJECT_INFO_LOG_LENGTH_ARB));
	}

	/**
	 * @param shaderBuffer
	 *            ByteBuffer containing shader code
	 * @param glShaderType
	 *            vertex or pixel/fragment
	 * @return int
	 * @throws Exception
	 */
	private int createShader(ByteBuffer shaderBuffer, int glShaderType) throws PrismShaderException
	{
		PrismShaderException exception = null;
		int shaderID = 0;
		try
		{
			// create shader
			shaderID = ARBShaderObjects.glCreateShaderObjectARB(glShaderType);
			if (shaderID == 0)
				return 0;

			// compile shader
			ARBShaderObjects.glShaderSourceARB(shaderID, shaderBuffer);
			ARBShaderObjects.glCompileShaderARB(shaderID);

			// check for errors
			if (ARBShaderObjects.glGetObjectParameteriARB(shaderID, ARBShaderObjects.GL_OBJECT_COMPILE_STATUS_ARB) == GL11.GL_FALSE)
			{
				ErrorCode c = new ErrorCode(this, ErrorID.COMPILE_ERROR);
				exception = new PrismShaderException(c);
				exception.appendInfo("info", getLogInfo(shaderID));
			}
		}
		catch (Exception e0)
		{
			// catch any exception
			ARBShaderObjects.glDeleteObjectARB(shaderID);

			ErrorCode c = new ErrorCode(this, ErrorID.COMPILE_ERROR);
			exception = new PrismShaderException(c);
			exception.appendOriginalException(e0);
		}

		if (exception != null)
		{
			// throw exception if any
			ShaderType shaderType;
			if (glShaderType == ARBVertexShader.GL_VERTEX_SHADER_ARB)
				shaderType = ShaderType.VERTEX_SHADER;
			if (glShaderType == ARBFragmentShader.GL_FRAGMENT_SHADER_ARB)
				shaderType = ShaderType.PIXEL_SHADER;
			else
				shaderType = ShaderType.UNKNOWN;

			exception.appendInfo("type", shaderType.toString());

			throw exception;
		}
		return shaderID;
	}

	public void createFrom(ByteBuffer vertexShader, ByteBuffer pixelShader) throws PrismShaderException
	{
		PrismShaderException exception = null;

		int vertShader, fragShader;
		try
		{
			// create vertex shader and fragment/pixel shader
			vertShader = createShader(vertexShader, ARBVertexShader.GL_VERTEX_SHADER_ARB);
			fragShader = createShader(pixelShader, ARBFragmentShader.GL_FRAGMENT_SHADER_ARB);

			if (vertShader == 0 || fragShader == 0)
			{
				ErrorCode c = new ErrorCode(this, ErrorID.COMPILE_ERROR);
				exception = new PrismShaderException(c);
			}
			else
			{
				program = ARBShaderObjects.glCreateProgramObjectARB();
			}

		}
		catch (Exception e0)
		{
			ErrorCode c = new ErrorCode(this, ErrorID.COMPILE_ERROR);
			exception = new PrismShaderException(c);
		}

		if (exception != null)
		{
			throw exception;
		}
	}

	@Override
	public void register(ByteBuffer vertexShader, ByteBuffer pixelShader)
	{

		// create program
		program = ARBShaderObjects.glCreateProgramObjectARB();

	}

	public void activate()
	{
		ARBShaderObjects.glUseProgramObjectARB(program);
	}

	@Override
	public ActorID getActorID()
	{
		return ActorID.SHADER;
	}
}
