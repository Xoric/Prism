package xoric.prism.creator.drawer.control;

import java.io.IOException;

import javax.swing.JOptionPane;

import xoric.prism.creator.drawer.model.DrawerModel;
import xoric.prism.creator.drawer.view2.IDrawerView2;
import xoric.prism.data.types.IPoint_r;
import xoric.prism.data.types.IText_r;
import xoric.prism.data.types.Path;
import xoric.prism.swing.input.PathInput;

public class DrawerControl2 implements IDrawerControl2
{
	private IDrawerView2 view;
	private DrawerModel model;

	public DrawerControl2(IDrawerView2 view)
	{
		this.view = view;
	}

	/* *********** IDrawerControl2 ****************** */

	@Override
	public void requestNewModel()
	{
		boolean isOK = askSaveChanges();

		boolean tryAgain = false;
		DrawerModel model = null;
		do
		{
			Path path = PathInput.showDialog("Choose a working directory");

			if (path != null)
			{
				model = new DrawerModel();
				try
				{
					model.initPath(path);
				}
				catch (IOException e)
				{
					model = null;
					String[] options = new String[] { "Choose another", "Cancel" };
					int res = JOptionPane.showOptionDialog(null, "An error occured while trying to write to the specified directory:\n\n",
							"New model", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
					tryAgain = res == 0;
				}
			}
		}
		while (tryAgain);

		if (model != null)
		{
			// pass new DrawerModel to DrawerView
			view.displayAll(model);
		}
	}

	@Override
	public void requestSetName(IText_r name)
	{
		model.setName(name);
		view.displayName(name);
	}

	@Override
	public void requestSetTileSize(IPoint_r tileSize)
	{
		model.setTileSize(tileSize);
		view.displayTileSize(tileSize);
	}

	/* ***************** internal ****************** */
	
	private void updateSaveState()
	{
		boolean canSave = model != null && model.hasChanges();
	}

	private boolean askSaveChanges()
	{
		boolean isOK = !model.hasChanges();

		if (!isOK)
		{
			int result = JOptionPane.showConfirmDialog(null,
					"The current model contains unsaved changes. Would you like to save before closing?", "Save changes",
					JOptionPane.YES_NO_CANCEL_OPTION);

			if (result == 0) // 0: Yes, save changes
			{
				isOK = saveChanges();
			}
			else
			{
				isOK = result == 1; // 1: No, discard | 2: Cancel
			}
		}
		return isOK;
	}

	private boolean saveChanges()
	{
		boolean isOK;
		try
		{
			model.save();
			isOK = true;
		}
		catch (IOException e)
		{
			JOptionPane.showMessageDialog(null, "An error occured while saving." + e.getMessage(), "Save model",
					JOptionPane.WARNING_MESSAGE);
			isOK = false;
		}
		return isOK;
	}
}
