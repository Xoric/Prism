package xoric.prism.creator.drawer.control;

import javax.swing.JOptionPane;

import xoric.prism.creator.drawer.model.AnimationModel;
import xoric.prism.creator.drawer.model.DrawerModel;
import xoric.prism.creator.drawer.view.IDrawerView2;
import xoric.prism.data.types.IPoint_r;
import xoric.prism.data.types.IText_r;
import xoric.prism.world.entities.AnimationIndex;
import xoric.prism.world.entities.ViewAngle;

public class DrawerControl2 implements IDrawerControl, IBusyControl
{
	private IDrawerView2 view;
	private DrawerModel model;

	private ModelControl modelControl;

	public DrawerControl2(IDrawerView2 view)
	{
		this.view = view;
		this.model = new DrawerModel();
	}

	private void updateSaveState()
	{
		boolean canSave = model != null && model.hasChanges();
		view.displaySaveState(canSave);
	}

	@Override
	public void setBusy(boolean b)
	{
		view.setHourglass(b);
	}

	private void acceptModel(DrawerModel m)
	{
		if (m != null)
		{
			model = m;
			modelControl.setModel(m);

			view.displayAll(m);
		}
	}

	/* *********** model control ****************** */

	@Override
	public void requestNewModel()
	{
		if (askSaveChanges())
			acceptModel(modelControl.createNewModel());
	}

	@Override
	public void requestOpenModel()
	{
		if (askSaveChanges())
			acceptModel(modelControl.openModel());
	}

	@Override
	public void requestSaveModel()
	{
		modelControl.saveModel();
	}

	@Override
	public void requestSetName(IText_r name)
	{
		modelControl.setName(name);

		view.displayName(name);
		updateSaveState();
	}

	@Override
	public void requestSetTileSize(IPoint_r tileSize)
	{
		model.setTileSize(tileSize);
		view.displayTileSize(tileSize);
	}

	@Override
	public boolean askSaveChanges()
	{
		boolean isOK = !model.hasChanges();

		if (!isOK)
		{
			int result = JOptionPane.showConfirmDialog(null,
					"The current model has unsaved changes. Would you like to save before closing?", "Save changes",
					JOptionPane.YES_NO_CANCEL_OPTION);

			if (result == 0) // 0: Yes, save changes
			{
				view.setHourglass(true);
				isOK = saveChanges();
				view.setHourglass(false);
			}
			else
			{
				isOK = result == 1; // 1: No, discard | 2: Cancel
			}
		}
		return isOK;
	}

	/* *********** animation control ****************** */

	@Override
	public void requestAddAnimation(AnimationIndex animation)
	{
		System.out.println("requestAddAnimation(" + animation + ")");

		//		view.displayAnimation(animation, true);
	}

	@Override
	public void requestEditAnimation(AnimationIndex animation)
	{
		view.setHourglass(true);
		AnimationModel m = model.getAnimation(animation);
		view.displayAnimationImages(m);
		view.setHourglass(false);
	}

	@Override
	public void requestDeleteAnimation(AnimationIndex animation)
	{
		System.out.println("requestDeleteAnimation(" + animation + ")");

		//		view.displayAnimation(animation, false);
	}

	/* *********** sprite control ****************** */

	@Override
	public void requestAddSprite(AnimationIndex animation, ViewAngle v, int index)
	{
		// TODO Auto-generated method stub

	}
}
