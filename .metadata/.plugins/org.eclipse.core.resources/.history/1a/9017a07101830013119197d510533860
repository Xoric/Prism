package xoric.prism.com;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import xoric.prism.data.exceptions.PrismException;
import xoric.prism.data.types.Heap;
import xoric.prism.data.types.HeapPacker_s;
import xoric.prism.data.types.IPackable;

public class Message implements IPackable
{
	public static final byte startByte = (byte) 233;

	protected Token token;
	protected final Heap heap;

	public Message(Token token)
	{
		this.token = token;
		this.heap = new Heap();
	}

	public Heap getHeap()
	{
		return heap;
	}

	// startByte	1 byte

	protected int calcPackedSize()
	{
		int size = 1 /* startByte */
		+ 2 /* size information */
		+ 1 /* token */
		+ HeapPacker_s.calcPackedSize_s(heap, token.getFloatDecimals()); /* heap */

		return size;
	}

	@Override
	public void unpack(InputStream stream) throws IOException, PrismException
	{
		// first 3 bytes (startByte + size) are already read at this point
		int i = stream.read();
		token = Token.valueOf(i);
		// ---
		HeapPacker_s.unpack_s(stream, token.getFloatDecimals(), heap);
	}

	@Override
	public void pack(OutputStream stream) throws IOException
	{
		writeHeader(stream);
		stream.write(token.ordinal());
		// ---
		HeapPacker_s.pack_s(stream, heap, token.getFloatDecimals());
	}

	protected void writeHeader(OutputStream stream) throws IOException
	{
		int size = calcPackedSize();
		stream.write(startByte);
		stream.write(size);
		stream.write(size >> 8);
	}

}
